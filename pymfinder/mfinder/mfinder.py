# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mfinder', [dirname(__file__)])
        except ImportError:
            import _mfinder
            return _mfinder
        if fp is not None:
            try:
                _mod = imp.load_module('_mfinder', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mfinder = swig_import_helper()
    del swig_import_helper
else:
    import _mfinder
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mfinder.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _mfinder.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _mfinder.intArray___setitem__(self, *args)
    def cast(self): return _mfinder.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _mfinder.intArray_frompointer
    if _newclass:frompointer = staticmethod(_mfinder.intArray_frompointer)
intArray_swigregister = _mfinder.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _mfinder.intArray_frompointer(*args)
intArray_frompointer = _mfinder.intArray_frompointer


def list_motifs(*args):
  return _mfinder.list_motifs(*args)
list_motifs = _mfinder.list_motifs

def motif_edges(*args):
  return _mfinder.motif_edges(*args)
motif_edges = _mfinder.motif_edges

def random_network(*args):
  return _mfinder.random_network(*args)
random_network = _mfinder.random_network

def motif_structure(*args):
  return _mfinder.motif_structure(*args)
motif_structure = _mfinder.motif_structure

def motif_participation(*args):
  return _mfinder.motif_participation(*args)
motif_participation = _mfinder.motif_participation

def list_free_mem(*args):
  return _mfinder.list_free_mem(*args)
list_free_mem = _mfinder.list_free_mem

def list64_free_mem(*args):
  return _mfinder.list64_free_mem(*args)
list64_free_mem = _mfinder.list64_free_mem

def res_tbl_mem_free_single(*args):
  return _mfinder.res_tbl_mem_free_single(*args)
res_tbl_mem_free_single = _mfinder.res_tbl_mem_free_single
class mfinder_input(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mfinder_input, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mfinder_input, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Filename"] = _mfinder.mfinder_input_Filename_set
    __swig_getmethods__["Filename"] = _mfinder.mfinder_input_Filename_get
    if _newclass:Filename = _swig_property(_mfinder.mfinder_input_Filename_get, _mfinder.mfinder_input_Filename_set)
    __swig_setmethods__["Edges"] = _mfinder.mfinder_input_Edges_set
    __swig_getmethods__["Edges"] = _mfinder.mfinder_input_Edges_get
    if _newclass:Edges = _swig_property(_mfinder.mfinder_input_Edges_get, _mfinder.mfinder_input_Edges_set)
    __swig_setmethods__["NumEdges"] = _mfinder.mfinder_input_NumEdges_set
    __swig_getmethods__["NumEdges"] = _mfinder.mfinder_input_NumEdges_get
    if _newclass:NumEdges = _swig_property(_mfinder.mfinder_input_NumEdges_get, _mfinder.mfinder_input_NumEdges_set)
    __swig_setmethods__["MotifSize"] = _mfinder.mfinder_input_MotifSize_set
    __swig_getmethods__["MotifSize"] = _mfinder.mfinder_input_MotifSize_get
    if _newclass:MotifSize = _swig_property(_mfinder.mfinder_input_MotifSize_get, _mfinder.mfinder_input_MotifSize_set)
    __swig_setmethods__["NRandomizations"] = _mfinder.mfinder_input_NRandomizations_set
    __swig_getmethods__["NRandomizations"] = _mfinder.mfinder_input_NRandomizations_get
    if _newclass:NRandomizations = _swig_property(_mfinder.mfinder_input_NRandomizations_get, _mfinder.mfinder_input_NRandomizations_set)
    __swig_setmethods__["MaxMembersListSz"] = _mfinder.mfinder_input_MaxMembersListSz_set
    __swig_getmethods__["MaxMembersListSz"] = _mfinder.mfinder_input_MaxMembersListSz_get
    if _newclass:MaxMembersListSz = _swig_property(_mfinder.mfinder_input_MaxMembersListSz_get, _mfinder.mfinder_input_MaxMembersListSz_set)
    __swig_setmethods__["Randomize"] = _mfinder.mfinder_input_Randomize_set
    __swig_getmethods__["Randomize"] = _mfinder.mfinder_input_Randomize_get
    if _newclass:Randomize = _swig_property(_mfinder.mfinder_input_Randomize_get, _mfinder.mfinder_input_Randomize_set)
    __swig_setmethods__["UseMetropolis"] = _mfinder.mfinder_input_UseMetropolis_set
    __swig_getmethods__["UseMetropolis"] = _mfinder.mfinder_input_UseMetropolis_get
    if _newclass:UseMetropolis = _swig_property(_mfinder.mfinder_input_UseMetropolis_get, _mfinder.mfinder_input_UseMetropolis_set)
    def __init__(self): 
        this = _mfinder.new_mfinder_input()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_mfinder_input
    __del__ = lambda self : None;
mfinder_input_swigregister = _mfinder.mfinder_input_swigregister
mfinder_input_swigregister(mfinder_input)

class list_item(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list_item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list_item, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _mfinder.list_item_val_set
    __swig_getmethods__["val"] = _mfinder.list_item_val_get
    if _newclass:val = _swig_property(_mfinder.list_item_val_get, _mfinder.list_item_val_set)
    __swig_setmethods__["p"] = _mfinder.list_item_p_set
    __swig_getmethods__["p"] = _mfinder.list_item_p_get
    if _newclass:p = _swig_property(_mfinder.list_item_p_get, _mfinder.list_item_p_set)
    __swig_setmethods__["next"] = _mfinder.list_item_next_set
    __swig_getmethods__["next"] = _mfinder.list_item_next_get
    if _newclass:next = _swig_property(_mfinder.list_item_next_get, _mfinder.list_item_next_set)
    def __init__(self): 
        this = _mfinder.new_list_item()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_list_item
    __del__ = lambda self : None;
list_item_swigregister = _mfinder.list_item_swigregister
list_item_swigregister(list_item)

class list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _mfinder.list_size_set
    __swig_getmethods__["size"] = _mfinder.list_size_get
    if _newclass:size = _swig_property(_mfinder.list_size_get, _mfinder.list_size_set)
    __swig_setmethods__["l"] = _mfinder.list_l_set
    __swig_getmethods__["l"] = _mfinder.list_l_get
    if _newclass:l = _swig_property(_mfinder.list_l_get, _mfinder.list_l_set)
    def __init__(self): 
        this = _mfinder.new_list()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_list
    __del__ = lambda self : None;
list_swigregister = _mfinder.list_swigregister
list_swigregister(list)

class list64_item(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list64_item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list64_item, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _mfinder.list64_item_val_set
    __swig_getmethods__["val"] = _mfinder.list64_item_val_get
    if _newclass:val = _swig_property(_mfinder.list64_item_val_get, _mfinder.list64_item_val_set)
    __swig_setmethods__["p"] = _mfinder.list64_item_p_set
    __swig_getmethods__["p"] = _mfinder.list64_item_p_get
    if _newclass:p = _swig_property(_mfinder.list64_item_p_get, _mfinder.list64_item_p_set)
    __swig_setmethods__["next"] = _mfinder.list64_item_next_set
    __swig_getmethods__["next"] = _mfinder.list64_item_next_get
    if _newclass:next = _swig_property(_mfinder.list64_item_next_get, _mfinder.list64_item_next_set)
    def __init__(self): 
        this = _mfinder.new_list64_item()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_list64_item
    __del__ = lambda self : None;
list64_item_swigregister = _mfinder.list64_item_swigregister
list64_item_swigregister(list64_item)

class list64(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list64, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list64, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _mfinder.list64_size_set
    __swig_getmethods__["size"] = _mfinder.list64_size_get
    if _newclass:size = _swig_property(_mfinder.list64_size_get, _mfinder.list64_size_set)
    __swig_setmethods__["l"] = _mfinder.list64_l_set
    __swig_getmethods__["l"] = _mfinder.list64_l_get
    if _newclass:l = _swig_property(_mfinder.list64_l_get, _mfinder.list64_l_set)
    def __init__(self): 
        this = _mfinder.new_list64()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_list64
    __del__ = lambda self : None;
list64_swigregister = _mfinder.list64_swigregister
list64_swigregister(list64)

class Motif_res(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motif_res, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motif_res, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _mfinder.Motif_res_id_set
    __swig_getmethods__["id"] = _mfinder.Motif_res_id_get
    if _newclass:id = _swig_property(_mfinder.Motif_res_id_get, _mfinder.Motif_res_id_set)
    __swig_setmethods__["size"] = _mfinder.Motif_res_size_set
    __swig_getmethods__["size"] = _mfinder.Motif_res_size_get
    if _newclass:size = _swig_property(_mfinder.Motif_res_size_get, _mfinder.Motif_res_size_set)
    __swig_setmethods__["real_count"] = _mfinder.Motif_res_real_count_set
    __swig_getmethods__["real_count"] = _mfinder.Motif_res_real_count_get
    if _newclass:real_count = _swig_property(_mfinder.Motif_res_real_count_get, _mfinder.Motif_res_real_count_set)
    __swig_setmethods__["real_pval"] = _mfinder.Motif_res_real_pval_set
    __swig_getmethods__["real_pval"] = _mfinder.Motif_res_real_pval_get
    if _newclass:real_pval = _swig_property(_mfinder.Motif_res_real_pval_get, _mfinder.Motif_res_real_pval_set)
    __swig_setmethods__["real_zscore"] = _mfinder.Motif_res_real_zscore_set
    __swig_getmethods__["real_zscore"] = _mfinder.Motif_res_real_zscore_get
    if _newclass:real_zscore = _swig_property(_mfinder.Motif_res_real_zscore_get, _mfinder.Motif_res_real_zscore_set)
    __swig_setmethods__["hits_num"] = _mfinder.Motif_res_hits_num_set
    __swig_getmethods__["hits_num"] = _mfinder.Motif_res_hits_num_get
    if _newclass:hits_num = _swig_property(_mfinder.Motif_res_hits_num_get, _mfinder.Motif_res_hits_num_set)
    __swig_setmethods__["conc_real"] = _mfinder.Motif_res_conc_real_set
    __swig_getmethods__["conc_real"] = _mfinder.Motif_res_conc_real_get
    if _newclass:conc_real = _swig_property(_mfinder.Motif_res_conc_real_get, _mfinder.Motif_res_conc_real_set)
    __swig_setmethods__["conc_real_pval"] = _mfinder.Motif_res_conc_real_pval_set
    __swig_getmethods__["conc_real_pval"] = _mfinder.Motif_res_conc_real_pval_get
    if _newclass:conc_real_pval = _swig_property(_mfinder.Motif_res_conc_real_pval_get, _mfinder.Motif_res_conc_real_pval_set)
    __swig_setmethods__["conc_real_zscore"] = _mfinder.Motif_res_conc_real_zscore_set
    __swig_getmethods__["conc_real_zscore"] = _mfinder.Motif_res_conc_real_zscore_get
    if _newclass:conc_real_zscore = _swig_property(_mfinder.Motif_res_conc_real_zscore_get, _mfinder.Motif_res_conc_real_zscore_set)
    __swig_setmethods__["unique_appear"] = _mfinder.Motif_res_unique_appear_set
    __swig_getmethods__["unique_appear"] = _mfinder.Motif_res_unique_appear_get
    if _newclass:unique_appear = _swig_property(_mfinder.Motif_res_unique_appear_get, _mfinder.Motif_res_unique_appear_set)
    __swig_setmethods__["rand_mean"] = _mfinder.Motif_res_rand_mean_set
    __swig_getmethods__["rand_mean"] = _mfinder.Motif_res_rand_mean_get
    if _newclass:rand_mean = _swig_property(_mfinder.Motif_res_rand_mean_get, _mfinder.Motif_res_rand_mean_set)
    __swig_setmethods__["rand_std_dev"] = _mfinder.Motif_res_rand_std_dev_set
    __swig_getmethods__["rand_std_dev"] = _mfinder.Motif_res_rand_std_dev_get
    if _newclass:rand_std_dev = _swig_property(_mfinder.Motif_res_rand_std_dev_get, _mfinder.Motif_res_rand_std_dev_set)
    __swig_setmethods__["conc_rand_mean"] = _mfinder.Motif_res_conc_rand_mean_set
    __swig_getmethods__["conc_rand_mean"] = _mfinder.Motif_res_conc_rand_mean_get
    if _newclass:conc_rand_mean = _swig_property(_mfinder.Motif_res_conc_rand_mean_get, _mfinder.Motif_res_conc_rand_mean_set)
    __swig_setmethods__["conc_rand_std_dev"] = _mfinder.Motif_res_conc_rand_std_dev_set
    __swig_getmethods__["conc_rand_std_dev"] = _mfinder.Motif_res_conc_rand_std_dev_get
    if _newclass:conc_rand_std_dev = _swig_property(_mfinder.Motif_res_conc_rand_std_dev_get, _mfinder.Motif_res_conc_rand_std_dev_set)
    __swig_setmethods__["all_members"] = _mfinder.Motif_res_all_members_set
    __swig_getmethods__["all_members"] = _mfinder.Motif_res_all_members_get
    if _newclass:all_members = _swig_property(_mfinder.Motif_res_all_members_get, _mfinder.Motif_res_all_members_set)
    __swig_setmethods__["all_rand_counts"] = _mfinder.Motif_res_all_rand_counts_set
    __swig_getmethods__["all_rand_counts"] = _mfinder.Motif_res_all_rand_counts_get
    if _newclass:all_rand_counts = _swig_property(_mfinder.Motif_res_all_rand_counts_get, _mfinder.Motif_res_all_rand_counts_set)
    __swig_setmethods__["conv_grade"] = _mfinder.Motif_res_conv_grade_set
    __swig_getmethods__["conv_grade"] = _mfinder.Motif_res_conv_grade_get
    if _newclass:conv_grade = _swig_property(_mfinder.Motif_res_conv_grade_get, _mfinder.Motif_res_conv_grade_set)
    __swig_setmethods__["dangling"] = _mfinder.Motif_res_dangling_set
    __swig_getmethods__["dangling"] = _mfinder.Motif_res_dangling_get
    if _newclass:dangling = _swig_property(_mfinder.Motif_res_dangling_get, _mfinder.Motif_res_dangling_set)
    def __init__(self): 
        this = _mfinder.new_Motif_res()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_Motif_res
    __del__ = lambda self : None;
Motif_res_swigregister = _mfinder.Motif_res_swigregister
Motif_res_swigregister(Motif_res)

class Member(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Member, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Member, name)
    __repr__ = _swig_repr
    __swig_setmethods__["node"] = _mfinder.Member_node_set
    __swig_getmethods__["node"] = _mfinder.Member_node_get
    if _newclass:node = _swig_property(_mfinder.Member_node_get, _mfinder.Member_node_set)
    __swig_setmethods__["role"] = _mfinder.Member_role_set
    __swig_getmethods__["role"] = _mfinder.Member_role_get
    if _newclass:role = _swig_property(_mfinder.Member_role_get, _mfinder.Member_role_set)
    def __init__(self): 
        this = _mfinder.new_Member()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_Member
    __del__ = lambda self : None;
Member_swigregister = _mfinder.Member_swigregister
Member_swigregister(Member)

class Motif(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motif, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motif, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _mfinder.Motif_id_set
    __swig_getmethods__["id"] = _mfinder.Motif_id_get
    if _newclass:id = _swig_property(_mfinder.Motif_id_get, _mfinder.Motif_id_set)
    __swig_setmethods__["count"] = _mfinder.Motif_count_set
    __swig_getmethods__["count"] = _mfinder.Motif_count_get
    if _newclass:count = _swig_property(_mfinder.Motif_count_get, _mfinder.Motif_count_set)
    __swig_setmethods__["prob_count"] = _mfinder.Motif_prob_count_set
    __swig_getmethods__["prob_count"] = _mfinder.Motif_prob_count_get
    if _newclass:prob_count = _swig_property(_mfinder.Motif_prob_count_get, _mfinder.Motif_prob_count_set)
    __swig_setmethods__["conc"] = _mfinder.Motif_conc_set
    __swig_getmethods__["conc"] = _mfinder.Motif_conc_get
    if _newclass:conc = _swig_property(_mfinder.Motif_conc_get, _mfinder.Motif_conc_set)
    __swig_setmethods__["hits"] = _mfinder.Motif_hits_set
    __swig_getmethods__["hits"] = _mfinder.Motif_hits_get
    if _newclass:hits = _swig_property(_mfinder.Motif_hits_get, _mfinder.Motif_hits_set)
    __swig_setmethods__["members"] = _mfinder.Motif_members_set
    __swig_getmethods__["members"] = _mfinder.Motif_members_get
    if _newclass:members = _swig_property(_mfinder.Motif_members_get, _mfinder.Motif_members_set)
    __swig_setmethods__["all_members"] = _mfinder.Motif_all_members_set
    __swig_getmethods__["all_members"] = _mfinder.Motif_all_members_get
    if _newclass:all_members = _swig_property(_mfinder.Motif_all_members_get, _mfinder.Motif_all_members_set)
    __swig_setmethods__["numberOfSelfEdges"] = _mfinder.Motif_numberOfSelfEdges_set
    __swig_getmethods__["numberOfSelfEdges"] = _mfinder.Motif_numberOfSelfEdges_get
    if _newclass:numberOfSelfEdges = _swig_property(_mfinder.Motif_numberOfSelfEdges_get, _mfinder.Motif_numberOfSelfEdges_set)
    __swig_setmethods__["conv_grade"] = _mfinder.Motif_conv_grade_set
    __swig_getmethods__["conv_grade"] = _mfinder.Motif_conv_grade_get
    if _newclass:conv_grade = _swig_property(_mfinder.Motif_conv_grade_get, _mfinder.Motif_conv_grade_set)
    def __init__(self): 
        this = _mfinder.new_Motif()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_Motif
    __del__ = lambda self : None;
Motif_swigregister = _mfinder.Motif_swigregister
Motif_swigregister(Motif)

class Edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["s"] = _mfinder.Edge_s_set
    __swig_getmethods__["s"] = _mfinder.Edge_s_get
    if _newclass:s = _swig_property(_mfinder.Edge_s_get, _mfinder.Edge_s_set)
    __swig_setmethods__["t"] = _mfinder.Edge_t_set
    __swig_getmethods__["t"] = _mfinder.Edge_t_get
    if _newclass:t = _swig_property(_mfinder.Edge_t_get, _mfinder.Edge_t_set)
    __swig_setmethods__["weight"] = _mfinder.Edge_weight_set
    __swig_getmethods__["weight"] = _mfinder.Edge_weight_get
    if _newclass:weight = _swig_property(_mfinder.Edge_weight_get, _mfinder.Edge_weight_set)
    def __init__(self): 
        this = _mfinder.new_Edge()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_Edge
    __del__ = lambda self : None;
Edge_swigregister = _mfinder.Edge_swigregister
Edge_swigregister(Edge)


def get_edge(*args):
  return _mfinder.get_edge(*args)
get_edge = _mfinder.get_edge

def get_motif_result(*args):
  return _mfinder.get_motif_result(*args)
get_motif_result = _mfinder.get_motif_result

def get_motif(*args):
  return _mfinder.get_motif(*args)
get_motif = _mfinder.get_motif

def get_motif_members(*args):
  return _mfinder.get_motif_members(*args)
get_motif_members = _mfinder.get_motif_members
# This file is compatible with both classic and new-style classes.


